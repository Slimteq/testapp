datasource db {
    provider = 'sqlite'
    url = 'file:./dev.db'
}

generator client {
    provider = "prisma-client-js"
}

plugin ennahcer {
    provider = "@core/enhancer"
    generatePermissionChecker = true
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    password      String    @password @omit
    posts         Post[]
    role          String    @default('Reader')

    // everybody can signup
    @@allow('create', true)

    // full access by self
    @@allow('all', auth() == this)
}


model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String   @length(1, 256)
    content   String
    status    String   @default('draft')
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String   @default(auth().id)

    // allow read for all signin users
    @@allow('read', auth() != null && status == 'published')

    // allow "Writer" users to create
    @@allow('create', auth().role == 'Writer')

    // full access by author
    @@allow('read,update,delete', author == auth())
}


model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}